import subprocess
import random
import re
#==========================================================================
===========
def get_interfaces():
# Get the list of network interfaces
result = subprocess.run(["ip", "link", "show"], capture_output=True,
text=True)
interfaces = []
for line in result.stdout.split('\n'):
if ':' in line:
parts = line.split(':')
if len(parts) > 1:
interface = parts[1].strip()
if interface and interface != 'lo': # Skip the loopback
interface
interfaces.append(interface)
return interfaces
#==========================================================================
===========
def get_current_mac(interface):
# Get the current MAC address of the specified interface
result = subprocess.run(["ip", "link", "show", interface],
capture_output=True, text=True)
match = re.search(r"link/ether ([0-9a-f:]{17})", result.stdout)
if match:
return match.group(1)
else:
return None
#==========================================================================
===========
def generate_random_mac():
# Generate a random MAC address
mac = [0x00, 0x16, 0x3e,
random.randint(0x00, 0x7f),
random.randint(0x00, 0xff),
random.randint(0x00, 0xff)]
return ':'.join(map(lambda x: "%02x" % x, mac))
#==========================================================================
===========
def change_mac(interface, new_mac):
# Bring down the interface
subprocess.run(["sudo", "ip", "link", "set", interface, "down"])
# Change the MAC address
subprocess.run(["sudo", "ip", "link", "set", "dev", interface,
"address", new_mac])
# Bring up the interface
subprocess.run(["sudo", "ip", "link", "set", interface, "up"])
def main():
interfaces = get_interfaces()
if not interfaces:
print("No network interfaces found.")
return
print("Available network interfaces:")
for idx, interface in enumerate(interfaces):
print(f"{idx + 1}: {interface}")
choice = int(input("Select the interface to change its MAC address: "))
- 1
if choice < 0 or choice >= len(interfaces):
print("Invalid selection.")
return
interface = interfaces[choice]
current_mac = get_current_mac(interface)
if current_mac:
print(f"Current MAC address of {interface} is {current_mac}")
else:
print(f"Could not determine current MAC address of {interface}")
exit()
new_mac = generate_random_mac()
print(f"Changing MAC address of {interface} to {new_mac}")
change_mac(interface, new_mac)
print(f"MAC address of {interface} changed to {new_mac}")
if __name__ == "__main__":
main()
